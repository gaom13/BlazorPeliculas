@using BlazorPeliculas.Shared
@using BlazorPeliculas.Shared.Entidades.Ausentismo
@inject SweetAlertService swal
@inject HttpClient Http

<div>
    <h2 class="text-azul-principal" style="font-size: 23px">
        <strong>Historial</strong>
    </h2>
</div>

<div class="cuadro-verde-principal">
    <div class="container-fluid">
        <div class="row align-content-center text-center align-items-center">
            <div class="col-sm-12 col-md-4 col-lg-4 col-xl-4 p-0 mb-2 me-2">
                <div class="col-12">
                    <RadzenLabel class="text-azul-principal" Text="Desde:" Component="DatePickerHourFormat" Style="vertical-align: middle;" />
                    <RadzenDatePicker Change="EventChange" @bind-Value=@historialPermisoModel.Desde ShowTime="true" HourFormat="12" DateFormat="MM/dd/yyyy" Name="DatePickerHourFormat" />
                </div>
            </div>
            <div class="col-sm-12 col-md-4 col-lg-4 col-xl-4 p-0 mb-2">
                <div class="col-12">
                    <RadzenLabel class="text-azul-principal" Text="Hasta:" Component="DatePickerHourFormat" Style="vertical-align: middle;" />
                    <RadzenDatePicker Min="@historialPermisoModel.Desde.AddDays(-1)" @bind-Value=@historialPermisoModel.Hasta ShowTime="true" HourFormat="12" DateFormat="MM/dd/yyyy" Name="DatePickerHourFormat" />
                </div>
            </div>
            <div class="col-sm-12 col-md-3 col-lg-3 col-xl-3 d-flex  align-items-center justify-content-end mb-2">
                <RadzenButton class="me-2" Click="BuscarPermisos" Icon="refresh" />
                <RadzenButton class="fondo-naranja" Click="Modificar" Icon="file_download" />
            </div>
        </div>

        <div class="row">
            @if (forecasts == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                @* <table class="table">
            <thead>
            <tr>
            <th>Estado</th>
            <th>Descripción</th>
            <th>Desde</th>
            <th>Hasta</th>
            <th>Horas</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var forecast in forecasts)
            {
            <tr>
            <td>@forecast.Estado</td>
            <td>@forecast.Descripcion</td>
            <td>@forecast.Desde</td>
            <td>@forecast.Hasta</td>
            <td>@forecast.Hora</td>
            </tr>
            }
            </tbody>
            </table> *@
                <RadzenDataGrid TItem="HistorialPermisoModel" AllowPaging="true" FilterMode="FilterMode.Simple"
                                FilterCaseSensitivity="@filterCaseSensitivity" LogicalFilterOperator="@logicalFilterOperator" 
                                AllowSorting="true" Data="@forecasts" ColumnWidth="150px" Count="@currentPage" PageSize="20" Style="height: 500px">
                    <Columns>
                        <RadzenDataGridColumn TItem="HistorialPermisoModel" Property="Estado" Title="Estado" Filterable="true" />
                        <RadzenDataGridColumn TItem="HistorialPermisoModel" Property="Descripcion" Title="Descripcion" />
                        <RadzenDataGridColumn TItem="HistorialPermisoModel" Property="Desde" Title="Estado" />
                        <RadzenDataGridColumn TItem="HistorialPermisoModel" Property="Hasta" Title="Estado" />
                        <!-- Agrega más columnas según sea necesario -->
                    </Columns>
                </RadzenDataGrid>

                @* <RadzenPager PageSize="10" Total="@forecasts.Count" @bind-Page="@currentPage" /> *@
            }
        </div>
    </div>

</div>

@code {
    DateTime date = DateTime.Now;
    SweetAlertServiceUtilidad sweetAlertService;
    HistorialPermisoConsultaModel historialPermisoModel;

    private List<HistorialPermisoModel> forecasts;
    private List<HistorialPermisoModel> forecasts_2;

    LogicalFilterOperator logicalFilterOperator = LogicalFilterOperator.And;
    FilterCaseSensitivity filterCaseSensitivity = FilterCaseSensitivity.CaseInsensitive;

     int currentPage = 1;

    protected override async void OnInitialized()
    {
        sweetAlertService = new SweetAlertServiceUtilidad(swal);
        historialPermisoModel = new HistorialPermisoConsultaModel();
        forecasts = await Http.GetFromJsonAsync<List<HistorialPermisoModel>>("api/Values");
        forecasts_2 = forecasts;
        StateHasChanged();
    }

    public async void BuscarPermisos()
    {
        forecasts = forecasts_2;
        forecasts = forecasts.Where(
            x => x.Desde >= historialPermisoModel.Desde && x.Hasta <= historialPermisoModel.Hasta
        ).ToList();
        StateHasChanged();

    }

    public async void Modificar()
    {
        var confirmado = await sweetAlertService.Confirmacion(
            "Confirmación",
            $"¿Deseas modificar el permiso: ?"
        );

        if (confirmado)
        {
            return;
        }
    }

    void EventChange()
    {
        historialPermisoModel.Hasta = historialPermisoModel.Desde > historialPermisoModel.Hasta ? historialPermisoModel.Desde : historialPermisoModel.Hasta;
    }
}
