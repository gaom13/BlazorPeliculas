@page "/calendar"
@using BlazorPeliculas.Client.Pages.Ausentismo.Jefe
@using BlazorPeliculas.Client.Repositorios.Ausentismo
@using BlazorPeliculas.Shared.Entidades.Ausentismo
@inject IRepositorioAusentismo repositorio

@inject DialogService DialogServices

<div class=" mt-3 me-3">
    <div class="d-flex  align-items-center justify-content-end mb-2">
        <RadzenButton hidden="@isBoss" Style="background: var(--naranja-principal);" Click="RevisarSolicitudes" Icon="article" Text="Revisar Solicitudes" />
    </div>
</div>

<div class="p-2">
    <RadzenScheduler class="custom-border" @ref=@scheduler SlotRender=@OnSlotRender style="height: 668px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                     TextProperty="Text" SelectedIndex="2" Locale="es-CO"
                     SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
        <RadzenDayView Text="DÃ­a" />
        <RadzenWeekView Text="Semana" />
        <RadzenMonthView Text="Mes" />
        @* <RadzenYearView />
        <RadzenYearPlannerView />
        <RadzenYearTimelineView /> *@
    </RadzenScheduler>
</div>


<div class="container-fluid">
    <div class="row align-items-start">
        <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6 mt-2 mb-4 mx-auto">
            <DetallePermiso detallePermisoModel="detallePermisoModel"></DetallePermiso>
        </div>
        <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6 mt-2 mb-4 mx-auto">
            <!-- Contenido del segundo div -->
            <HistorialPermiso></HistorialPermiso>
        </div>
    </div>
</div>

@code {
    RadzenScheduler<Appointment>? scheduler;
    //EventConsole console;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    Appointment detallePermisoModel;
    bool isBoss = false;

    IList<Appointment> appointments;

    protected override void OnInitialized()
    {
        appointments = repositorio.ObtenerPermisos();
    }

    private async Task RevisarSolicitudes()
    {
        await DialogServices.OpenAsync<RevisarSolicitudes>("<p class='text-azul-principal' style='display: inline'><strong>Solicitudes</strong></p>",
               new Dictionary<string, object>() { },
               new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {

        if (args.View.Text != "Year")
        {
            // Appointment data = await DialogServices.OpenAsync<CrearPermiso>("Nuevo Permiso",
            //     new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } },
            //     new DialogOptions()
            //     {
            //         //Style = "background: blue;"
            //     });

            // if (data != null)
            // {
            //     appointments.Add(data);
            //     // Either call the Reload method or reassign the Data property of the Scheduler
            //     await scheduler!.Reload();
            // }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {

        var copy = new Appointment
            {
                Start = args.Data.Start,
                End = args.Data.End,
                Text = args.Data.Text
            };

        // var data = await DialogServices.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });
        // if (data != null)
        // {
        //     // Update the appointment
        //     args.Data.Start = data.Start;
        //     args.Data.End = data.End;
        //     args.Data.Text = data.Text;
        // }

        detallePermisoModel = args.Data;

        await scheduler!.Reload();

    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        /*
                if (args.Data.Text == "Birthday")
                {
                    args.Attributes["style"] = "background: red";
                }
        */
        args.Attributes["style"] = "background: green";
    }
}