@page "/calendar"

@inject DialogService DialogServices

<RadzenScheduler class="custom-border" @ref=@scheduler SlotRender=@OnSlotRender style="height: 668px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
    TextProperty="Text" SelectedIndex="2" Locale="es-CO"
    SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenDayView Text="DÃ­a"/>
    <RadzenWeekView Text="Semana"/>
    <RadzenMonthView Text="Mes"/>
    @* <RadzenYearView />
    <RadzenYearPlannerView />
    <RadzenYearTimelineView /> *@
</RadzenScheduler>

<div class="container-fluid">
    <div class="row align-items-start">
        <div class="col-sm-12 col-md-6 col-lg-4 col-xl-6 mt-2 mb-4">
            <DetallePermiso></DetallePermiso>
        </div>
        <div class="col-sm-12 col-md-6 col-lg-4 col-xl-6 mt-2 mb-4">
            <!-- Contenido del segundo div -->
            <div>
                <h2 class="text-azul-principal" style="font-size: 23px">
                    <strong>Historial</strong>
                </h2>
            </div>

            <div class="cuadro-verde-principal">
                <h3>Hola</h3>
            </div>
        </div>
    </div>
</div>

@code {
    RadzenScheduler<Appointment>? scheduler;
    //EventConsole console;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Appointment> appointments = new List<Appointment>
    {
        new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {

        if (args.View.Text != "Year")
        {
            Appointment data = await DialogServices.OpenAsync<AddAppointmentPage>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler!.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {

        var copy = new Appointment
        {
            Start = args.Data.Start,
            End = args.Data.End,
            Text = args.Data.Text
        };
    
        var data = await DialogServices.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });
        if (data != null)
        {
            // Update the appointment
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Text = data.Text;
        }

        await scheduler!.Reload();
        
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

/*
        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
*/
        args.Attributes["style"] = "background: green";
    }
}