@inject NotificationService NotificationService

<div>
    <label>@Label</label>
    <div>
        <InputFile OnChange="OnChange" accept=".jpg,.jpeg,.png" />
    </div>
</div>

<div>
    @if (imagenBase64 is not null)
    {
        <div>
            <div style="margin: 10px">
                <img src="data:image/jpeg;base64, @imagenBase64" style="width: 400px"/>
            </div>
        </div>
    }

    @if (ImagenURL is not null)
    {
        <div>
            <div style="margin: 10px">
                <img src="@ImagenURL" style="width: 400px" />
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Label { get; set; } = "Imagen";
    [Parameter]
    public string? ImagenURL { get; set; }
    [Parameter]
    public EventCallback<string> ImagenSeleccionada { get; set; }
    private string? imagenBase64;

    async Task OnChange(InputFileChangeEventArgs e)
    {
        var imagenes = e.GetMultipleFiles();

        try
        {
            foreach (var imagen in imagenes)
            {
                var arrBytes = new byte[imagen.Size];
                await imagen.OpenReadStream().ReadAsync(arrBytes);
                imagenBase64 = Convert.ToBase64String(arrBytes);
                ImagenURL = null;
                await ImagenSeleccionada.InvokeAsync(imagenBase64);
                StateHasChanged();
            }
        }catch (Exception ee)
        {
            NotificationService.Notify(
                new NotificationMessage { 
                    Severity = NotificationSeverity.Error, 
                    Summary = "Error de Imagen", 
                    Detail = "La imagen es demasiado grande",
                    Duration = 4000,
                }
            );
        }
    }
}
