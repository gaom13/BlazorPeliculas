@inject IJSRuntime js
@inject SweetAlertService swal

<input type="checkbox" @bind="MostrarBotones" />
<span>
    Mostrar botones
</span>

<ListadoGenerico Listado="Peliculas">
    <HayRegistro Context="pelicula">
        <PeliculaIndividual Pelicula="pelicula" MostrarBotonos=MostrarBotones EliminarPelicula="EliminarPelicula" />
    </HayRegistro>
</ListadoGenerico>

@code {

    [Parameter]
    [EditorRequired]
    public List<Pelicula>? Peliculas { get; set; }

    public void LimpiarPeliculas()
    {
        if(Peliculas is not null){
            Peliculas.Clear();
        }
    }

    protected override void OnInitialized()
    {
        Console.WriteLine($"OnInitialized - Cantidad Peliculas {Peliculas!.Count}");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"OnParametersSet - Cantidad Peliculas {Peliculas!.Count}");
    }

    protected override void OnAfterRender(bool primeraRenderizacion)
    {
        Console.WriteLine("OnAfterRender: Primera vez: " + primeraRenderizacion);
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("ShouldRender");
        return true;
    }

    bool MostrarBotones = false;

    private async Task EliminarPelicula(Pelicula pelicula)
    {
        var resultado = await swal.FireAsync(new SweetAlertOptions{
            Title = "Confirmación",
            Text = $"¿Desea borrar la pélucla {pelicula.Titulo}?",
            ShowCancelButton = true
        });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            Console.WriteLine("Eliminando una película");
            Peliculas!.Remove(pelicula);
        }

    }

}
